Program name ircserv
Turn in files Makefile, *.{h, hpp}, *.cpp, *.tpp, *.ipp,
an optional configuration file
Makefile NAME, all, clean, fclean, re
Arguments port: The listening port
password: The connection password
External functs. Everything in C++ 98.
socket, close, setsockopt, getsockname,
getprotobyname, gethostbyname, getaddrinfo,
freeaddrinfo, bind, connect, listen, accept, htons,
htonl, ntohs, ntohl, inet_addr, inet_ntoa, send,
recv, signal, sigaction, lseek, fstat, fcntl, poll
(or equivalent)
Libft authorized n/a
Description An IRC server in C++ 98
You are required to develop an IRC server using the C++ 98 standard.
You must not develop an IRC client.
You must not implement server-to-server communication.
Your executable will be run as follows:
./ircserv <port> <password>
• port: The port number on which your IRC server will be listening to for incoming
IRC connections.
• password: The connection

Even though poll() is mentionned in the subject and the evaluation
scale, you may use any equivalent such as select(), kqueue(), or
epoll().
4
ft_irc Internet Relay Chat
III.1 Requirements
• The server must be capable of handling multiple clients simultaneously without
hanging.
• Forking is prohibited. All I/O operations must be non-blocking.
• Only 1 poll() (or equivalent) can be used for handling all these operations (read,
write, but also listen, and so forth).
Because you have to use non-blocking file descriptors, it is
possible to use read/recv or write/send functions with no poll()
(or equivalent), and your server wouldn’t be blocking.
However, it would consume more system resources.
Therefore, if you attempt to read/recv or write/send in any file
descriptor without using poll() (or equivalent), your grade will be
0.
• Several IRC clients exist. You have to choose one of them as a reference. Your
reference client will be used during the evaluation process.
• Your reference client must be able to connect to your server without encountering any error.
• Communication between client and server has to be done via TCP/IP (v4 or v6).
• Using your reference client with your server must be similar to using it with any
official IRC server. However, you only have to implement the following features:
◦ You must be able to authenticate, set a nickname, a username, join a channel,
send and receive private messages using your reference client.
◦ All the messages sent from one client to a channel have to be forwarded to
every other client that joined the channel.
◦ You must have operators and regular users.
◦ Then, you have to implement the commands that are specific to channel
operators:
∗ KICK - Eject a client from the channel
∗ INVITE - Invite a client to a channel
∗ TOPIC - Change or view the channel topic
∗ MODE - Change the channel’s mode:
· i: Set/remove Invite-only channel
· t: Set/remove the restrictions of the TOPIC command to channel
operators
· k: Set/remove the channel key (password)
5
ft_irc Internet Relay Chat
· o: Give/take channel operator privilege
· l: Set/remove the user limit to channel
• Of course, you are expected to write a clean code.
